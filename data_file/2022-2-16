70 爬楼梯

class Solution {
public:
    int climbStairs(int n) {
        int x = 1;
        int y = 2;
        if (n<=2){
            return n ;
        }
        int z=0;
        for (int i =2;i<n;i++){
            z=x+y;
            x=y;
            y=z;
        }
        return z;
    }
};


746 最小花费爬楼梯

int min(int x,int y){
    if(x<y) return x;
    else return y;
}

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int length = cost.size();
        if (length<=2) return min(cost[0],cost[1]);
        int low = min(cost[0],cost[1]);
        int high = min(cost[0]+cost[2],cost[1]);
        int temp = high;
        for (int i =3;i<length;i++){
            temp = min(low+cost[i-1],high+cost[i]);
            low=high;
            high=temp;
        }
        return temp;
        
    }
};


977. 有序数组的平方

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> squ;
        int mid;
        int length = nums.size();
        for (int i =0 ; i<length-1;i++){
            if(nums[i]<0 && nums[i+1]>=0) {
                mid=i+1;
                break;
            }
            else if(nums[0]>=0) mid=0;
            else mid =length-1;
        }
        int x = mid;
        int y = mid-1;
        while(x<length || y>=0){
            if(x<length && y==-1){
                squ.push_back(nums[x]*nums[x]);
                x+=1;
            }
            else if (x==length && y>-1){
                squ.push_back(nums[y]*nums[y]);
                y-=1;
            }
            else if (nums[y]*nums[y]<=nums[x]*nums[x]){
                squ.push_back(nums[y]*nums[y]);
                y-=1;
            }
            else{
                squ.push_back(nums[x]*nums[x]);
                x+=1;
            }
    
        }

        return squ;
    }
};


189. 轮转数组

class Solution {
public:
    void swap(int& a , int& b){
        int temp=a;
        a=b;
        b=temp;
    }
    void reverse(vector<int>& nums, int start , int end){
        for(int i = 0;i<(end-start+1)/2; i++){
            swap(nums[start+i],nums[end-i]);
            //cout<<nums[0]<<nums[1]<<nums[2]<<nums[3]<<endl;
        }
    }

    void rotate(vector<int>& nums, int k) {
        k%=nums.size();
        reverse(nums , 0, nums.size()-1);
        reverse(nums , 0, k-1);
        reverse(nums , k, nums.size()-1);
    
    }
};
