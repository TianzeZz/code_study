21. 合并两个有序链表

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode * point1 = new ListNode(0);
        ListNode * point2 = new ListNode(0);
        point1->next = list1;
        point2->next = list2;
        ListNode * left = point1;
        ListNode * right = point2;
        while(left->next || right->next){
            if(left->next && right->next){
                if (left->next->val <= right->next->val){
                    left=left->next;
                }
                else if (left->next->val > right->next->val){
                    ListNode * new_point = new ListNode(right->next->val,left->next);
                    left->next = new_point;
                    left = left->next;
                    right = right->next;
                }
            }
            else if(left->next && right->next==NULL){
                break;
            }
            else if (left->next == NULL && right->next){
                left->next = right->next;
                break;
            }
        }
        return point1->next;
    }
};

206. 反转链表

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode * left = nullptr;
        ListNode * middle = head;
        ListNode * right = head;
        while(middle){
            right = middle->next;
            middle->next = left;
            left = middle;
            middle = right;
        }
        return left;
    }
};

413. 等差数列划分

class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        if (nums.size()<3) return 0 ;
        int left_sub,right_sub = nums[1]-nums[0];
        int num = 0;
        int ans = 0;
        for(int i = 2;i<nums.size();i++){
            left_sub = right_sub;
            if(nums[i] - left_sub == nums[i-1]){
                num+=1;
                ans+=num;
            }
            else if(nums[i] - left_sub != nums[i-1]){
                right_sub = nums[i]-nums[i-1];
                num=0;
            }
        }
        return ans;
    }
};

91. 解码方法

class Solution {
public:
    int numDecodings(string s) {
        int left = 1,middle = 1, right = 1;
        int ans = 1;
        if(s.size()==1 && s[0]!='0') return 1;
        if(s[0] =='0') return 0;
        for (int i=1;i<s.size();i++){
            left= middle;
            middle = right;
            if((s[i-1]== '1' || s[i-1]== '2') && (s[i]== '1' || s[i]==  '2')){
                right = left+middle;
            }
            else if ((s[i-1]== '1'|| s[i-1]==  '2') && (s[i]>= '3' && s[i]<= '6')){
                right = left+middle;
                ans*=right;
                middle=1;
                right=1;
            }
            else if (s[i-1]== '1'  && (s[i]>= '7' && s[i]<= '9')){
                right = left+middle;
                ans*=right;
                middle=1;
                right=1;
            }
            else if (s[i-1]==  '2' && (s[i]>= '7' && s[i]<= '9')){
                ans*=right;
                middle=1;
                right=1;
            }
            else if ( s[i]== '0' &&  (s[i-1]>= '1' && s[i-1]<= '2')){
                right = left;
                ans*=right;
                middle=1;
                right=1;
            }
            else if( s[i]== '0' &&  (s[i-1]>= '3' || s[i-1]== '0')){
                return 0;
            }
            if( i ==s.size()-1) ans*=right;
        }
        return ans;
    }
};

537. 复数乘法

class Solution {
public:
    string complexNumberMultiply(string num1, string num2) {
        int a=0,b=0,c=0,d=0;
        int last = 0;
        for (int i =0;i<num1.size()-1;i++){
            if(num1[i] == '-' && last ==0){
                i++;
                a = -num1[i]+48;
            }
            else if(num1[i] == '-' && last!=0){
                i++;
                b = -num1[i]+48;
            }
            else if(num1[0] == '-' && last ==0 && num1[i]!='+' ){
                a=a*10-num1[i]+48;
            }
            else if(num1[0] != '-' && last ==0 && num1[i]!='+' ){
                a=a*10+num1[i]-48;
            }
            else if(num1[i] == '+' ){
                last=i;
            }
            else if(num1[last+1] == '-' && last !=0 && num1[i]!='+' ){
                b=b*10-num1[i]+48;
            }
            else if(num1[last+1] != '-' && last !=0 && num1[i]!='+' ){
                b=b*10+num1[i]-48;
            }
        }
        last=0;
        for (int i =0;i<num2.size()-1;i++){
            if(num2[i] == '-' && last ==0){
                i++;
                c = -num2[i]+48;
            }
            else if(num2[i] == '-' && last !=0){
                i++;
                d = -num2[i]+48;
            }
            else if(num2[0] == '-' && last ==0 && num2[i]!='+' ){
                c=c*10-num2[i]+48;
            }
            else if(num2[0] != '-' && last ==0 && num2[i]!='+' ){
                c=c*10+num2[i]-48;
            }
            else if(num2[i] == '+' ){
                last=i;
            }
            else if(num2[last+1] == '-' && last !=0 && num2[i]!='+' ){
                d=d*10-num2[i]+48;
            }
            else if(num2[last+1] != '-' && last !=0 && num2[i]!='+' ){
                d=d*10+num2[i]-48;
            }
        }
        int real = a*c-(b*d);
        int xu = a*d+b*c;
        string ans = to_string(real)+"+"+to_string(xu)+"i";
        return ans;
    }
};
