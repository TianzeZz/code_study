64. 最小路径和
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        vector<int> row;
        int m = grid.size();
        int n = grid[0].size();
        row.resize(m);
        row[0] = grid[0][0];
        for(int i=1;i<m;i++){
            row[i] = grid[i][0]+row[i-1];
        }
        for(int i = 1;i<n;i++){
            row[0] +=grid[0][i];
            for(int j = 1;j<m;j++){
                row[j] = min(row[j-1],row[j])+grid[j][i];
            }
        }
        return row[m-1];
    }
};

221. 最大正方形

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        vector<int> row;
        vector<int> last_row;
        int m = matrix.size();
        int n = matrix[0].size();
        int ans=0;
        row.resize(m);
        last_row.resize(m);
        for(int i=0;i<m;i++){
            if(matrix[i][0] =='1')row[i] =1;
            else if (matrix[i][0] =='0')row[i]= 0;
        }
        for(int i=0;i<m;i++){
            ans = max(ans,row[i]);
        }
        for(int i = 1;i<n;i++){
            last_row =row;
            if(matrix[0][i] =='0'){
                row[0] = 0;
            }
            else if(matrix[0][i]=='1' ){
                if(m>1) row[0] = 1;
                else return 1;
            }
            for(int j = 1;j<m;j++){
                if(matrix[j][i] =='0'){
                    row[j] =0;
                }
                else if(matrix[j][i]=='1'){
                    row[j] = min(min(last_row[j-1],row[j-1]),last_row[j]) +1;
                }
            }
            for(int k=0;k<m;k++){
                ans = max(ans,row[k]);
            }
        }
        ans = min(m,min(ans,n));
        return ans*ans;
    }
};

递推思路：
https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/solution/tong-ji-quan-wei-1-de-zheng-fang-xing-zi-ju-zhen-2/


521. 最长特殊序列 Ⅰ

class Solution {
public:
    int findLUSlength(string a, string b) {
        int m  =a.size();
        int n = b.size();
        if(m!=n){
            return max(m,n);
        }
        for(int i = 0;i<n;i++){
            if(a[i] != b[i] ){
                return n;
            }
        }
        return -1;
    }
};
