
3. 无重复字符的最长子串

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int x = s.length();
        int maxlength=1;
        int need_skip=0;
        if (x==0){
            return 0;
        }
        for (int i =1;i<x;i++){
            string a = s.substr(i-maxlength,maxlength);
            
            string b = s.substr(i,1);
            if(a.find_last_of(b)==-1 && need_skip==0){
                maxlength+=1;
            }
            else if (a.find_last_of(b)+1<=need_skip && need_skip!=0){
                need_skip-=1;
            }
            else if(a.find_last_of(b)+1>need_skip){
                need_skip=a.find_last_of(b);
            }
            //cout<<a<<" "<<b<<" "<<need_skip<<endl;

        }
        return maxlength;
    }
};

//利用哈希表的题解，这里记住unordered_set<char>类型
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_set<char>u;
        int left=0,right=0,Max=0;
        int n=s.size();
        while(right<n){
            if(u.end()==u.find(s[right])){
                u.insert(s[right++]);
                Max=max(right-left,Max);
            } else u.erase(s[left++]);
        }
        return Max;
    }
};

567. 字符串的排列

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        vector<int> num(26);
        int x= s2.length(),y = s1.length();
        for (int i=0;i<y;i++){
            num[s1[i]-'a']+=1;
        }
        int left = 0, right =0;
        for(right =0;right<x;right++){
            num[s2[right]-'a']-=1;
            while(num[s2[right]-'a']<0){
                num[s2[left++]-'a']+=1;
            }
            if (right-left+1==y){
                return true;
            }
        }
        return false;
    }
};

152. 乘积最大子数组

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int x =nums.size();
        int left_min=nums[0],left_max=nums[0];
        int right_min = nums[0],right_max=nums[0];
        int max1=right_max;
        for (int i=1;i<x;i++) {
            left_max=right_max;
            left_min=right_min;
            right_max=max(nums[i],max(nums[i]*left_min,nums[i]*left_max));
            right_min=min(nums[i],min(nums[i]*left_min,nums[i]*left_max));
            max1 = max(max1,right_max);
        }
        return max1;
    }
};

1567. 乘积为正数的最长子数组长度

class Solution {
public:
    int getMaxLen(vector<int>& nums) {
        int max_num = 0,min_num = 0;
        int new_max_num = 0,new_min_num = 0;
        int max_z=0;
        for(int i = 0; i<nums.size();i++){
            max_num=new_max_num;
            min_num=new_min_num;
            if(nums[i]==0){
                new_max_num=0;
                new_min_num=0;
            }
            else{
                if(nums[i]>0){
                    new_max_num=max_num+1;
                    min_num>0 ? new_min_num=min_num+1:new_min_num=min_num;
                }
                else if (nums[i]<0){
                    if(min_num==0) {
                        new_min_num=max_num+1;
                        new_max_num=0;
                    }
                    else if(min_num>0){
                        new_min_num=max_num+1;
                        new_max_num=min_num+1;
                    }
                }
                
            }
            //cout<<new_max_num<<new_min_num<<endl;
            max_z = max(max_z,new_max_num);
        }
        return max_z;
    }
};
