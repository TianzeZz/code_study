617. 合并二叉树

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        TreeNode* root_left = new TreeNode();
        TreeNode* root_right = new TreeNode();
        root_left->left = root1;
        root_right->left = root2;
        stack<TreeNode*> tree1;
        stack<TreeNode*> tree2;
        tree1.push(root_left);
        tree2.push(root_right);
        while(!tree1.empty()){
            TreeNode* left_point = tree1.top();
            TreeNode* right_point= tree2.top();
            tree1.pop();
            tree2.pop();
            if(right_point->left && left_point->left){
                right_point->left->val+=left_point->left->val;
                tree1.push(left_point->left);
                tree2.push(right_point->left);
            }
            else if(right_point->left==NULL && left_point->left){
                TreeNode* new_point = new TreeNode(left_point->left->val);
                right_point->left = new_point;
                tree1.push(left_point->left);
                tree2.push(right_point->left);
            }
            if(right_point->right && left_point->right){
                right_point->right->val+=left_point->right->val;
                tree1.push(left_point->right);
                tree2.push(right_point->right);
            }
            else if(right_point->right==NULL && left_point->right){
                TreeNode* new_point = new TreeNode(left_point->right->val);
                right_point->right = new_point;
                tree1.push(left_point->right);
                tree2.push(right_point->right);
            }
        }
        return root_right->left;
    }
};

116. 填充每个节点的下一个右侧节点指针

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    void next_reset(Node* root){
        if(root->right){
            if(root->next == NULL){
                root->right->next=NULL;
            }
            else if(root->next){
                root->right->next = root->next->left;
            }
            if(root->left) root->left->next = root->right;
            next_reset(root->right);
            if(root->left) next_reset(root->left);  
        }
    }
    Node* connect(Node* root) {
        Node *new_root = new Node();
        new_root->right=root;
        next_reset(new_root);
        return new_root->right;
    }
};

309. 最佳买卖股票时机含冷冻期

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.empty()) {
            return 0;
        }

        int n = prices.size();
        int f0 = -prices[0];
        int f1 = 0;
        int f2 = 0;
        for (int i = 1; i < n; ++i) {
            int newf0 = max(f0, f2 - prices[i]);
            int newf1 = f0 + prices[i];
            int newf2 = max(f1, f2);
            f0 = newf0;
            f1 = newf1;
            f2 = newf2;
        }

        return max(f1, f2);
    }
};

思路与算法
https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/zui-jia-mai-mai-gu-piao-shi-ji-han-leng-dong-qi-4/

714. 买卖股票的最佳时机含手续费

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int lastday[2];
        int today[2];
        today[0] = -prices[0];
        today[1] = 0;
        for(int i = 1;i<prices.size();i++){
            lastday[0] = today[0];
            lastday[1] = today[1];
            today[0] = max(lastday[0],lastday[1]-prices[i]);
            today[1] = max(lastday[1],lastday[0]+prices[i]-fee);
        }
        return max(0,today[1]);
    }
};

917. 仅仅反转字母

class Solution {
public:
    void swap(char & a,char & b){
        char temp = a;
        a=b;
        b=temp;
    }
    bool is_eng(char &a){
        if ((a>=65  &&a<=90 )|| (a>=97 &&a<=122)){
            return true;
        }
        return false;
    }
    string reverseOnlyLetters(string s) {
        int left=0,right = s.size()-1;
        while(left<right){
            if(!is_eng(s[left])){
                left+=1;
            }
            else if(!is_eng(s[right])){
                right-=1;
            }
            else{
                swap(s[right],s[left]);
                right--;
                left++;
            }
        }
        return s;
    }
};
